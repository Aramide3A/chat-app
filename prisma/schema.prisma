// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  username    String    @unique
  email       String    @unique
  password    String
  profile     Profile?
  message     Message[]
  createdRoom Room[]    @relation("Room Creator")
  joinedRoom  Room[]    @relation("Room Members")
}

model Profile {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  first_name String
  last_name  String
  phone      String
  userId     String @unique @db.ObjectId
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String    @unique
  creatorId String    @db.ObjectId
  creator   User      @relation(fields: [creatorId], references: [id], name: "Room Creator")
  name      String
  memberIds String[]  @db.ObjectId
  member    User      @relation(fields: memberIds, references: [id], name: "Room Members")
  Message   Message[]
}

model Message {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId()
  userId  String   @db.ObjectId()
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId  String   @db.ObjectId()
  room    Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  content String
  time    DateTime @default(now())
}
